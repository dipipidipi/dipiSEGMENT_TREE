//https://oj.vnoi.info/problem/kquery
#include <bits/stdc++.h>
using namespace std;

#define int long long

int n, q;
pair<int, int> a[30011];
using ii = pair<int, int>;

bool cmp(ii x, ii y)
{
    return x.first > y.first;
}

struct queries
{
    int i, j, k, index;
}qu[200011];

bool cmpS(queries x, queries y)
{
    return x.k > y.k;
}

int res[200011];

void read()
{
    cin >> n;
    for (int i = 1; i <= n; ++i)
    {
        cin >> a[i].first;
        a[i].second = i;
    }

    cin >> q;
    for (int i = 1; i <= q; ++i)
    {
        cin >> qu[i].i >> qu[i].j >> qu[i].k;
        qu[i].index = i;
    }

    sort(a+1, a+n+1, cmp);
    sort(qu+1, qu+q+1, cmpS);
}

int T[4*30011];

int query(int id, int l, int r, int u, int v)
{
    if (u > r or v < l)
        return 0;
    if (u <= l and r <= v)
    {
        return T[id];
    }

    int mid = (l+r)>>1;

    int lef = query(2*id, l, mid, u, v);
    int righ = query(2*id+1, mid+1, r, u, v);

    return lef + righ;
}
void update(int id, int l, int r, int vt, int val)
{
    if (l > vt or r < vt)
        return;
    if (l == r)
    {
        T[id] = val;
        return;
    }
    int mid = (l+r)>>1;
    update (2*id, l, mid, vt, val);
    update (2*id+1, mid+1, r, vt, val);

    T[id] = T[2*id] + T[2*id+1];
}

void solve()
{
    int j = 1;
    for (int i = 1; i <= q; ++i)
    {
        while (j <= n and a[j].first > qu[i].k)
        {
            update(1, 1, n, a[j].second, 1);
            j++;
        }
        res[qu[i].index] = query(1, 1, n, qu[i].i, qu[i].j);
    }

    for (int i = 1; i <= q; ++i)
        cout << res[i] << '\n';
}

signed main()
{
    cin.tie(0)->sync_with_stdio(0);

    #define task "phcbaka"
    if (fopen(task ".inp", "r"))
    {
        freopen(task ".inp", "r", stdin);
        freopen(task ".out", "w", stdout);
    }

    read();
    solve();

    return 0;
}
